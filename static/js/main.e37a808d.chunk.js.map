{"version":3,"sources":["components/quote/quote.jsx","App.js","reportWebVitals.js","index.js"],"names":["Quote","props","readData","dataURL","fetch","then","res","json","result","quotes","setState","loading","catch","handleClick","randomColor","state","bgColor","bind","x","Math","floor","random","y","z","this","icon","faSpinner","className","quote","styles","backgroundColor","stylesTextQuote","color","fontSize","fontWeight","marginBottom","stylesText","document","body","style","id","position","bottom","height","faQuoteLeft","text","faQuoteRight","author","type","onClick","href","target","aria-label","faTwitter","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4RAaqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,SAAW,SAACC,GACVC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAMC,EAASD,EACf,EAAKE,SAAS,CACZC,SAAS,EACTF,cAGHG,SApBc,EAsCnBC,YAAc,WACZ,EAAKC,eArCL,EAAKC,MAAQ,CACXJ,SAAS,EACTF,OAAQ,GACRO,QAAS,IAEX,EAAKH,YAAc,EAAKA,YAAYI,KAAjB,gBAPF,E,+CAuBnB,WACE,IAAMC,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBL,EAAO,cAAUE,EAAV,YAAeI,EAAf,YAAoBC,EAApB,KACbC,KAAKd,SAAS,CACZM,c,+BAIJ,WACEQ,KAAKV,cACLU,KAAKtB,SAASsB,KAAKvB,MAAME,W,oBAO3B,WAAU,IACAM,EAAWe,KAAKT,MAAhBN,OACAE,EAAYa,KAAKT,MAAjBJ,QACAK,EAAYQ,KAAKT,MAAjBC,QAER,GAAIL,EAAS,OAAO,8BAAK,cAAC,IAAD,CAAiBc,KAAMC,IAAWC,UAAU,qBAErE,IAAMC,EAAQnB,EAAOU,KAAKC,MAAsB,KAAhBD,KAAKE,WAC/BQ,EAAS,CACbC,gBAAiBd,GAEbe,EAAkB,CACtBC,MAAOhB,EACPiB,SAAU,OACVC,WAAY,MACZC,aAAc,QAEVC,EAAa,CACjBJ,MAAOhB,EACPmB,aAAc,QAKhB,OAFAE,SAASC,KAAKC,MAAMT,gBAAkBN,KAAKT,MAAMC,QAG/C,sBAAKwB,GAAG,YAAR,UACE,sBAAKA,GAAG,OAAOD,MAAOR,EAAtB,UACE,cAAC,IAAD,CAAiBQ,MAAO,CAAEE,SAAU,WAAYC,OAAQ,MAAOC,OAAQ,QAAUlB,KAAMmB,MACtFhB,EAAMiB,KACP,cAAC,IAAD,CAAiBN,MAAO,CAAEE,SAAU,WAAYC,OAAQ,MAAOC,OAAQ,QAAUlB,KAAMqB,SAEzF,qBAAKN,GAAG,SAASD,MAAOH,EAAxB,SAAqCR,EAAMmB,SAC3C,wBAAQP,GAAG,YAAYQ,KAAK,SAASrB,UAAU,kBAAkBsB,QAASzB,KAAKX,YAAa0B,MAAOV,EAAnG,uBACA,mBAAGW,GAAG,cAAcU,KAAI,gDAA2CtB,EAAMiB,MAAQM,OAAO,OAAOC,aAAW,mBAA1G,SAA6H,wBAAQZ,GAAG,QAAQQ,KAAK,SAASrB,UAAU,kBAAkBY,MAAOV,EAApE,SAA4E,cAAC,IAAD,CAAiBJ,KAAM4B,iB,GA5ErMC,aCUpBC,E,kDAhBb,WAAYtD,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXZ,QAAS,+BAHM,E,0CAOnB,WACE,OACE,8BACE,cAAC,EAAD,CAAOA,QAASqB,KAAKT,MAAMZ,gB,GAXjBmD,aCMHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,SAM1BX,M","file":"static/js/main.e37a808d.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/prop-types */\n/* eslint-disable react/sort-comp */\n/* eslint-disable no-use-before-define */\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport {\n  faQuoteLeft, faQuoteRight, faSpinner,\n} from '@fortawesome/free-solid-svg-icons';\nimport './quote.css';\n\nexport default class Quote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      quotes: [],\n      bgColor: '',\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  readData = (dataURL) => {\n    fetch(dataURL)\n      .then((res) => res.json())\n      .then((result) => {\n        const quotes = result;\n        this.setState({\n          loading: false,\n          quotes,\n        });\n      })\n      .catch();\n  };\n\n  randomColor() {\n    const x = Math.floor(Math.random() * 256);\n    const y = Math.floor(Math.random() * 256);\n    const z = Math.floor(Math.random() * 256);\n    const bgColor = `rgb(${x},${y},${z})`;\n    this.setState({\n      bgColor,\n    });\n  }\n\n  componentDidMount() {\n    this.randomColor();\n    this.readData(this.props.dataURL);\n  }\n\n  handleClick = () => {\n    this.randomColor();\n  }\n\n  render() {\n    const { quotes } = this.state;\n    const { loading } = this.state;\n    const { bgColor } = this.state;\n\n    if (loading) return <div><FontAwesomeIcon icon={faSpinner} className=\"fa-pulse fa-5x\" /></div>;\n\n    const quote = quotes[Math.floor(Math.random() * 1343)];\n    const styles = {\n      backgroundColor: bgColor,\n    };\n    const stylesTextQuote = {\n      color: bgColor,\n      fontSize: '25px',\n      fontWeight: '600',\n      marginBottom: '10px',\n    };\n    const stylesText = {\n      color: bgColor,\n      marginBottom: '20px',\n    };\n\n    document.body.style.backgroundColor = this.state.bgColor;\n\n    return (\n      <div id=\"quote-box\">\n        <div id=\"text\" style={stylesTextQuote}>\n          <FontAwesomeIcon style={{ position: 'relative', bottom: '5px', height: '20px' }} icon={faQuoteLeft} />\n          {quote.text}\n          <FontAwesomeIcon style={{ position: 'relative', bottom: '5px', height: '20px' }} icon={faQuoteRight} />\n        </div>\n        <div id=\"author\" style={stylesText}>{quote.author}</div>\n        <button id=\"new-quote\" type=\"button\" className=\"btn btn-primary\" onClick={this.handleClick} style={styles}>New quote</button>\n        <a id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?text=${quote.text}`} target=\"_top\" aria-label=\"tweet this quote\"><button id=\"tweet\" type=\"button\" className=\"btn btn-primary\" style={styles}><FontAwesomeIcon icon={faTwitter} /></button></a>\n      </div>\n    );\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable no-use-before-define */\nimport React, { Component } from 'react';\nimport Quote from './components/quote/quote';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataURL: 'https://type.fit/api/quotes',\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Quote dataURL={this.state.dataURL} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}